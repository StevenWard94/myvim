" vim: fo-=oql:foldmarker=\\begin,\\end:foldmethod=marker:foldlevel=0:nospell:
" ------------------------------------------------------------------------------
" Vim bundles configuration file
" Language:       N/A
" Maintainer:     Steven Ward <stevenward94@gmail.com>
" URL:            https://github.com/stevenward94/myvim
" Last Change:    2016 Nov 25
" ------------------------------------------------------------------------------

" Setup \begin1
  set nocompatible
  filetype off

  " Load plugins using Vundle <https://github.com/VundleVim/Vundle.vim>
  set runtimepath+=~/.vim/bundle/Vundle.vim
  call vundle#begin()

  Plugin 'VundleVim/Vundle.vim'

  " Support Bundles
  Plugin 'Raimondi/delimitMate'
  Plugin 'jgdavey/tslime.vim'
  Plugin 'Shougo/vimproc.vim'
  "Plugin 'ervandew/supertab'
  Plugin 'benekastah/neomake'
  Plugin 'moll/vim-bbye'
  Plugin 'nathanaelkane/vim-indent-guides'
  Plugin 'Shougo/neosnippet'
  Plugin 'Shougo/neosnippet-snippets'
  Plugin 'honza/vim-snippets'
  " source 'support_functions.vim' to support vim-snippets
  if filereadable(expand('~/.vim/bundle/vim-snippets/snippets/support_functions.vim'))
    source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
  endif
  Plugin 'mattn/webapi-vim'
  Plugin 'mattn/gist-vim'
  Plugin 'luochen1990/rainbow'
  if executable('ctags')
    Plugin 'majutsushi/tagbar'
  endif
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-repeat'

  " Git
  Plugin 'tpope/vim-fugitive'
  Plugin 'int3/vim-extradite'
  Plugin 'rhysd/conflict-marker.vim'

  " Bars, Panels & Files
  Plugin 'scrooloose/nerdtree'
  Plugin 'ctrlpvim/ctrlp.vim'
  Plugin 'tacahiroy/ctrlp-funky'
  Plugin 'vim-airline/vim-airline'

  " Text Manipulation
  Plugin 'vim-scripts/Align'
  Plugin 'simnalamburt/vim-mundo'
  Plugin 'tpope/vim-commentary'
  Plugin 'godlygeek/tabular'
  Plugin 'michaeljsmith/vim-indent-object'
  Plugin 'easymotion/vim-easymotion'

  if (&filetype == 'haskell')
    Plugin 'itchyny/haskell-indent-vim'
    Plugin 'neovimhaskell/haskell-vim'
    Plugin 'enomsg/vim-haskellConcealPlus'
    Plugin 'eagletmt/ghcmod-vim'
    Plugin 'eagletmt/neco-ghc'
    Plugin 'Twinside/vim-hoogle'
    Plugin 'Twinside/vim-haskellFold'
    Plugin 'mpickering/hlint-refactor-vim'
    Plugin 'travitch/hasksyn'
    Plugin 'lukerandall/haskellmode-vim'
    Plugin 'adinapoli/cumino'
    Plugin 'bitc/vim-hdevtools'
  endif

  if (&filetype == 'python')
    Plugin 'klen/python-mode'
    Plugin 'yssource/python.vim'
    Plugin 'python_match.vim'
    Plugin 'pythoncomplete'
  endif

  if (&filetype == 'ruby')
    Plugin 'tpope/vim-rails'
    let g:rubycomplete_buffer_loading = 1
  endif

  if (&filetype == 'clojure')
    Plugin 'guns/vim-clojure-static'
    Plugin 'guns/vim-clojure-highlight'
  endif

  " Colorschemes
  Plugin 'vim-scripts/wombat256.vim'
  Plugin 'octol/vim-cpp-enhanced-highlight'
  "Plugin 'tomasr/molokai'
  Plugin 'vim-scripts/colorful256.vim'
  Plugin 'altercation/vim-colors-solarized'
  Plugin 'kien/rainbow_parentheses.vim'
  Plugin 'vim-airline/vim-airline-themes'

  " Recommended by Stephen Diehl
  Plugin 'scrooloose/syntastic'
  Plugin 'tomtom/tlib_vim'
  Plugin 'MarcWeber/vim-addon-mw-utils'
  Plugin 'garbas/vim-snipmate'
  Plugin 'scrooloose/nerdcommenter'
  Plugin 'Shougo/neocomplete.vim'

  call vundle#end()

  filetype plugin indent on
" \end1

" Plugin-Specific Configurations \begin1

  " Syntastic \begin2
    map <Leader>s :SyntasticToggleMode<CR>

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_id_checkers = 1
    let g:syntastic_echo_current_error = 1
    let g:syntastic_cursor_column = 0
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    let g:syntastic_error_symbol = '‚ùå'
    let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
    let g:syntastic_warning_symbol = '‚ö†Ô∏è'
    let g:syntastic_style_warning_symbol = 'üí©'

    let g:syntastic_vim_checkers = ['vint']

    let g:syntastic_java_checkers = ['javac']
    let g:syntastic_java_javac_classpath = "./lib/*.jar:./src:./bin:"

    if exists(':Syntastic') != 0
      highlight link SyntasticErrorSign SignColumn
      highlight link SyntasticWarningSign SignColumn
      highlight link SyntasticStyleErrorSign SignColumn
      highlight link SyntasticStyleWarningSign SignColumn
    endif

  " \end2

  " GHC-Mod \begin2
    function! s:GHCmod_hask() abort
      map <silent> tw :GhcModTypeInsert<CR>
      map <silent> ts :GhcModSplitFunCase<CR>
      map <silent> tq :GhcModType<CR>
      map <silent> te :GhcModTypeClear<CR>
    endfunction
  " \end2

  " SuperTab \begin2
    let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

    if has('gui_running')
      imap <C-Space> <C-r>=SuperTabAlternateCompletion("\<lt>C-x>\<lt>C-o>")<CR>
    else
      if has('unix')
        inoremap <Nul> <C-r>=SuperTabAlternateCompletion("\<lt>C-x>\<lt>C-o>")<CR>
      endif
    endif
  " \end2

  " Neco-GHC \begin2
    function! s:NecoGHC_hask() abort
      let g:haskellmode_completion_ghc = 1
      setlocal omnifunc=necoghc#omnifunc
    endfunction
  " \end2

  " NERDTree \begin2
    map <leader>n :NERDTreeToggle<CR>
  " \end2

  " Tabularize \begin2
    function! s:Tabularize_hask() abort
      let g:haskell_tabular = 1

      vmap a= :Tabularize /=<CR>
      vmap a; :Tabularize /::<CR>
      vmap a- :Tabularize /-><CR>
    endfunction
  " \end2

  " CtrlP \begin2
    let g:ctrlp_custom_ignore = {
          \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
          \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
   \}

    " Use the nearest .git directory as the cwd for ctrlp
    let g:ctrlp_working_path_mode = 'r'

    " Mapping for ':CtrlP' command
    nmap <leader>p :CtrlP<CR>

    " Easy bindings for various ctrlp modes
    nmap <leader>bb :CtrlPBuffer<CR>
    nmap <leader>bm :CtrlPMixed<CR>
    nmap <leader>bs :CtrlPMRU<CR>
  " \end2

  " Colorscheme Variables \begin2

    " vim-colors-solarized
    let g:solarized_termcolors=256
  " \end2

  " Airline \begin2

    " Use powerline fonts for airline
    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    let g:airline_powerline_fonts = 1
    let g:airline_symbols.space = "\ua0"

    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
  " \end2

  " delimitMate \begin2
    let delimitMate_expand_cr = 1
  " \end2

  " Haskell-Only \begin2
    " This autocmd group configures certain settings for plugins which,
    " are only loaded when filetype=haskell and thus caused problems when attempting to
    " set variables or call functions that are non-existant for other file types
    " The functions called by the autocmds are defined above in the section for the
    " corresponding plugin
    augroup justhask_plugins
      autocmd!
      autocmd FileType haskell :call s:GHCmod_hask()
      autocmd FileType haskell :call s:NecoGHC_hask()
      autocmd FileType haskell :call s:Tabularize_hask()
    augroup END
    " \end2

    " Easymotion \begin2
      map <LocalLeader> <Plug>(easymotion-prefix)
    " \end2
      
" \end1

